#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ΩÔøΩÔøΩ—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';
import { query, testConnection, getDatabaseStats } from '../src/utils/database.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = {
  info: (msg) => console.log(`${colors.blue}‚Ñπ${colors.reset} ${msg}`),
  success: (msg) => console.log(`${colors.green}‚úÖ${colors.reset} ${msg}`),
  warn: (msg) => console.log(`${colors.yellow}‚ö†${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}‚ùå${colors.reset} ${msg}`),
  header: (msg) => console.log(`\n${colors.bright}${colors.cyan}${msg}${colors.reset}\n`)
};

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Ñ–∞–π–ª
 */
async function executeSqlFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    const sql = fs.readFileSync(filePath, 'utf8');
    
    // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    for (const command of commands) {
      if (command.trim()) {
        await query(command);
      }
    }

    return true;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${filePath}: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
 */
async function checkTablesExist() {
  try {
    const result = await execDatabase(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name;
    `);
    
    const tables = result.rows.map(row => row.table_name);
    return tables;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: ${error.message}`);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
 */
async function checkDataExists() {
  try {
    const tables = ['devices', 'problems'];
    const counts = {};
    
    for (const table of tables) {
      try {
        const result = await execDatabase(`SELECT COUNT(*) as count FROM ${table}`);
        counts[table] = parseInt(result.rows[0].count);
      } catch (error) {
        counts[table] = 0;
      }
    }
    
    return counts;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    return {};
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function runMigrations() {
  log.header('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π');
  
  const migrationsDir = join(__dirname, '../migrations');
  const migrationFiles = [
    '001_init_tables.sql',
    '002_add_indexes.sql'
  ];

  for (const file of migrationFiles) {
    const filePath = join(migrationsDir, file);
    try {
      log.info(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${file}`);
      await executeSqlFile(filePath);
      log.success(`–ú–∏–≥—Ä–∞—Ü–∏—è ${file} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      log.error(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${file}: ${error.message}`);
      throw error;
    }
  }
}

/**
 * –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
async function seedDatabase() {
  log.header('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–¥–∏–Ω–≥
    const { seedDevices, seedProblems } = await import('../src/utils/seed.js');
    
    log.info('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã devices...');
    await seedDevices();
    log.success('–¢–∞–±–ª–∏—Ü–∞ devices –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    
    log.info('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã problems...');
    await seedProblems();
    log.success('–¢–∞–±–ª–∏—Ü–∞ problems –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏: ${error.message}`);
    throw error;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initializeDatabase() {
  try {
    log.header('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    log.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const isConnected = await checkConnection();
    
    if (!isConnected) {
      throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    log.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const existingTables = await checkTablesExist();
    log.info(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${existingTables.length}`);
    
    if (existingTables.length === 0) {
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏ÔøΩÔøΩ–∞—Ü–∏—é
      log.info('–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
      await runMigrations();
      await seedDatabase();
    } else {
      log.info('–¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const dataCounts = await checkDataExists();
      log.info('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:');
      Object.entries(dataCounts).forEach(([table, count]) => {
        log.info(`  ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
      });
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –∑–∞–ø–æ–ª–Ω—è–µ–º
      if (dataCounts.devices < 5 || dataCounts.problems < 10) {
        log.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–æ–ª–Ω—è–µ–º...');
        await seedDatabase();
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    log.header('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    const finalStats = await getDatabaseStats();
    
    if (finalStats && Array.isArray(finalStats)) {
      finalStats.forEach(stat => {
        log.info(`${stat.table_name}: ${stat.row_count} –∑–∞–ø–∏—Å–µ–π`);
      });
    }
    
    log.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  initializeDatabase()
    .then(() => {
      log.success('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      process.exit(1);
    });
}

export { initializeDatabase };
