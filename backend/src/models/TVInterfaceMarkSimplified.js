import BaseModel from "./BaseModel.js";

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –Ω–∞ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
 * –°–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
class TVInterfaceMarkSimplified extends BaseModel {
  constructor() {
    super("tv_interface_marks");
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∑–∞ÔøΩÔøΩ—Ä–æ—Å–æ–º
   */
  async getByTVInterfaceId(tvInterfaceId, options = {}) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks'
      `;
      const columnsResult = await this.query(columnsQuery);
      const existingColumns = columnsResult.rows.map((row) => row.column_name);

      console.log(
        "üìã Existing columns in tv_interface_marks:",
        existingColumns,
      );

      // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
      const baseColumns = [
        "id",
        "tv_interface_id",
        "name",
        "description",
        "position",
        "color",
        "is_active",
        "created_at",
        "updated_at",
      ];
      const safeColumns = baseColumns.filter((col) =>
        existingColumns.includes(col),
      );

      let query = `
        SELECT 
          ${safeColumns.map((col) => `tim.${col}`).join(", ")}
        FROM ${this.tableName} tim
        WHERE tim.tv_interface_id = $1
      `;

      const params = [tvInterfaceId];

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (
        options.is_active !== undefined &&
        existingColumns.includes("is_active")
      ) {
        query += ` AND tim.is_active = $${params.length + 1}`;
        params.push(options.is_active);
      }

      query += ` ORDER BY tim.created_at ASC`;

      const result = await this.query(query, params);
      return result.rows.map((row) =>
        this.normalizeMarkData(row, existingColumns),
      );
    } catch (error) {
      console.error("Error getting TV interface marks:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è —à–∞–≥–∞ (–µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ step_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
   */
  async getByStepId(stepId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ step_id
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks' AND column_name = 'step_id'
      `;
      const columnsResult = await this.query(columnsQuery);

      if (columnsResult.rows.length === 0) {
        // –ö–æ–ª–æ–Ω–∫–∞ step_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        console.log("‚ö†Ô∏è Column step_id does not exist, returning empty array");
        return [];
      }

      const query = `
        SELECT tim.*
        FROM ${this.tableName} tim
        WHERE tim.step_id = $1 AND tim.is_active = true
        ORDER BY tim.created_at ASC
      `;

      const result = await this.query(query, [stepId]);
      return result.rows.map((row) => this.normalizeMarkData(row));
    } catch (error) {
      console.error("Error getting marks by step ID:", error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—Ç–º–µ—Ç–∫—É —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
   */
  async create(data) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!data.tv_interface_id) {
        throw new Error("TV interface ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
      }

      if (!data.name || !data.name.trim()) {
        throw new Error("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
      }

      if (!data.position || typeof data.position !== "object") {
        throw new Error("–ü–æ–∑–∏—Ü–∏—è –æ—Ç–º–µ—Ç–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      const tvInterfaceExists = await this.query(
        "SELECT id FROM tv_interfaces WHERE id = $1",
        [data.tv_interface_id],
      );
      if (tvInterfaceExists.rows.length === 0) {
        throw new Error("TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks'
      `;
      const columnsResult = await this.query(columnsQuery);
      const existingColumns = columnsResult.rows.map((row) => row.column_name);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ TV interfaces
      const timestamp = Date.now().toString(36);
      const randomPart = Math.random().toString(36).substr(2, 9);
      const markId = `tim_${timestamp}_${randomPart}`;

      const now = new Date().toISOString();
      const markData = {
        id: markId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π ID –≤–º–µ—Å—Ç–æ UUID
        tv_interface_id: data.tv_interface_id,
        name: data.name.trim(),
        description: data.description?.trim() || "",
        position: JSON.stringify(data.position),
        color: data.color || "#3b82f6",
        created_at: now,
        updated_at: now,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
      if (existingColumns.includes("step_id")) {
        markData.step_id = data.step_id || null;
      }

      if (existingColumns.includes("mark_type")) {
        markData.mark_type = data.mark_type || "point";
      }

      if (existingColumns.includes("shape")) {
        markData.shape = data.shape || "circle";
      }

      if (existingColumns.includes("size")) {
        markData.size = data.size
          ? JSON.stringify(data.size)
          : JSON.stringify({ width: 20, height: 20 });
      }

      if (existingColumns.includes("is_active")) {
        markData.is_active = data.is_active !== false;
      }

      if (existingColumns.includes("is_visible")) {
        markData.is_visible = data.is_visible !== false;
      }

      if (existingColumns.includes("display_order")) {
        markData.display_order = data.display_order || 0;
      }

      if (existingColumns.includes("metadata")) {
        markData.metadata = JSON.stringify(data.metadata || {});
      }

      if (existingColumns.includes("tags")) {
        markData.tags = JSON.stringify(data.tags || []);
      }

      // –°—Ç—Ä–æ–∏–º –ø—Ä—è–º–æ–π INSERT –∑–∞–ø—Ä–æ—Å —Å –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const columns = Object.keys(markData);
      const values = Object.values(markData);
      const placeholders = columns.map((_, index) => `$${index + 1}`);

      const insertQuery = `
        INSERT INTO ${this.tableName} (${columns.join(", ")})
        VALUES (${placeholders.join(", ")})
        RETURNING *
      `;

      console.log("üîß Creating mark with custom ID:", markId);
      const result = await this.query(insertQuery, values);
      return await this.getById(result.rows[0].id);
    } catch (error) {
      console.error("Error creating TV interface mark:", error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É
   */
  async update(id, data) {
    try {
      const existing = await this.getById(id);
      if (!existing) {
        throw new Error("–û—Ç–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks'
      `;
      const columnsResult = await this.query(columnsQuery);
      const existingColumns = columnsResult.rows.map((row) => row.column_name);

      const updateData = {
        updated_at: new Date().toISOString(),
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
      if (data.name !== undefined) updateData.name = data.name.trim();
      if (data.description !== undefined)
        updateData.description = data.description?.trim() || "";
      if (data.position !== undefined)
        updateData.position = JSON.stringify(data.position);
      if (data.color !== undefined) updateData.color = data.color;

      if (
        data.mark_type !== undefined &&
        existingColumns.includes("mark_type")
      ) {
        updateData.mark_type = data.mark_type;
      }

      if (data.shape !== undefined && existingColumns.includes("shape")) {
        updateData.shape = data.shape;
      }

      if (data.size !== undefined && existingColumns.includes("size")) {
        updateData.size = JSON.stringify(data.size);
      }

      if (
        data.is_active !== undefined &&
        existingColumns.includes("is_active")
      ) {
        updateData.is_active = data.is_active;
      }

      if (
        data.is_visible !== undefined &&
        existingColumns.includes("is_visible")
      ) {
        updateData.is_visible = data.is_visible;
      }

      if (
        data.display_order !== undefined &&
        existingColumns.includes("display_order")
      ) {
        updateData.display_order = data.display_order;
      }

      if (data.metadata !== undefined && existingColumns.includes("metadata")) {
        updateData.metadata = JSON.stringify(data.metadata);
      }

      if (data.tags !== undefined && existingColumns.includes("tags")) {
        updateData.tags = JSON.stringify(data.tags);
      }

      await super.updateById(id, updateData);
      return await this.getById(id);
    } catch (error) {
      console.error("Error updating TV interface mark:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –ø–æ ID —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  async getById(id) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks'
      `;
      const columnsResult = await this.query(columnsQuery);
      const existingColumns = columnsResult.rows.map((row) => row.column_name);

      const query = `SELECT * FROM ${this.tableName} WHERE id = $1`;
      const result = await this.query(query, [id]);

      if (result.rows.length === 0) {
        return null;
      }

      return this.normalizeMarkData(result.rows[0], existingColumns);
    } catch (error) {
      console.error("Error getting TV interface mark by ID:", error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  async deleteByTVInterfaceId(tvInterfaceId) {
    try {
      const query = `DELETE FROM ${this.tableName} WHERE tv_interface_id = $1`;
      const result = await this.query(query, [tvInterfaceId]);
      return result.rowCount;
    } catch (error) {
      console.error("Error deleting marks by TV interface ID:", error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è —à–∞–≥–∞
   */
  async deleteByStepId(stepId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ step_id
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks' AND column_name = 'step_id'
      `;
      const columnsResult = await this.query(columnsQuery);

      if (columnsResult.rows.length === 0) {
        console.log(
          "‚ö†Ô∏è Column step_id does not exist, cannot delete by step ID",
        );
        return 0;
      }

      const query = `DELETE FROM ${this.tableName} WHERE step_id = $1`;
      const result = await this.query(query, [stepId]);
      return result.rowCount;
    } catch (error) {
      console.error("Error deleting marks by step ID:", error);
      return 0;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ—Ç–æ–∫ (–µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ display_order —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
   */
  async reorder(tvInterfaceId, markIds) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ display_order
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks' AND column_name = 'display_order'
      `;
      const columnsResult = await this.query(columnsQuery);

      if (columnsResult.rows.length === 0) {
        console.log("‚ö†Ô∏è Column display_order does not exist, cannot reorder");
        return true;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      for (let i = 0; i < markIds.length; i++) {
        await this.query(
          `UPDATE ${this.tableName} SET display_order = $1, updated_at = NOW() WHERE id = $2 AND tv_interface_id = $3`,
          [i, markIds[i], tvInterfaceId],
        );
      }

      return true;
    } catch (error) {
      console.error("Error reordering TV interface marks:", error);
      throw error;
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ—Ç–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  normalizeMarkData(mark, existingColumns = null) {
    if (!mark) return null;

    const normalized = { ...mark };

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –ø–æ–ª–µ–π
    try {
      if (mark.position && typeof mark.position === "string") {
        normalized.position = JSON.parse(mark.position);
      }
    } catch (e) {
      normalized.position = { x: 0, y: 0 };
    }

    try {
      if (mark.size && typeof mark.size === "string") {
        normalized.size = JSON.parse(mark.size);
      }
    } catch (e) {
      normalized.size = { width: 20, height: 20 };
    }

    try {
      if (mark.coordinates && typeof mark.coordinates === "string") {
        normalized.coordinates = JSON.parse(mark.coordinates);
      }
    } catch (e) {
      normalized.coordinates = null;
    }

    try {
      if (mark.metadata && typeof mark.metadata === "string") {
        normalized.metadata = JSON.parse(mark.metadata);
      }
    } catch (e) {
      normalized.metadata = {};
    }

    try {
      if (mark.tags && typeof mark.tags === "string") {
        normalized.tags = JSON.parse(mark.tags);
      }
    } catch (e) {
      normalized.tags = [];
    }

    return normalized;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–º–µ—Ç–æ–∫ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async getStats() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
      const columnsQuery = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'tv_interface_marks'
      `;
      const columnsResult = await this.query(columnsQuery);
      const existingColumns = columnsResult.rows.map((row) => row.column_name);

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      let query = `SELECT COUNT(*) as total FROM ${this.tableName}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
      const statFields = ["COUNT(*) as total"];

      if (existingColumns.includes("is_active")) {
        statFields.push(
          "COUNT(CASE WHEN is_active = true THEN 1 END) as active",
        );
      }

      if (existingColumns.includes("is_visible")) {
        statFields.push(
          "COUNT(CASE WHEN is_visible = true THEN 1 END) as visible",
        );
      }

      if (existingColumns.includes("mark_type")) {
        statFields.push(
          "COUNT(CASE WHEN mark_type = 'point' THEN 1 END) as points",
        );
        statFields.push(
          "COUNT(CASE WHEN mark_type = 'zone' THEN 1 END) as zones",
        );
        statFields.push(
          "COUNT(CASE WHEN mark_type = 'area' THEN 1 END) as areas",
        );
      }

      statFields.push(
        "COUNT(DISTINCT tv_interface_id) as interfaces_with_marks",
      );

      if (existingColumns.includes("step_id")) {
        statFields.push("COUNT(DISTINCT step_id) as steps_with_marks");
      }

      query = `SELECT ${statFields.join(", ")} FROM ${this.tableName}`;

      const result = await this.query(query);
      return result.rows[0];
    } catch (error) {
      console.error("Error getting TV interface marks stats:", error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return {
        total: 0,
        active: 0,
        visible: 0,
        interfaces_with_marks: 0,
      };
    }
  }
}

export default TVInterfaceMarkSimplified;
