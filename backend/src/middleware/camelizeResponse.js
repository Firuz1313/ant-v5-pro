import humps from 'humps';

/**
 * Middleware –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è snake_case –∫–ª—é—á–µ–π –≤ camelCase –≤ –æ—Ç–≤–µ—Ç–∞—Ö
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º—ë–Ω –ø–æ–ª–µ–π –º–µ–∂–¥—É backend (snake_case) –∏ frontend (camelCase)
 */
const camelizeResponse = (req, res, next) => {
  const originalJson = res.json;
  
  res.json = function(data) {
    if (data && typeof data === 'object') {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –∏–∑ snake_case –≤ camelCase
      const camelizedData = humps.camelizeKeys(data, {
        separator: '_',
        process: (key, convert) => {
          // –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ camelCase –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
          if (!key.includes('_') || key.toLowerCase() !== key) {
            return key;
          }
          return convert(key);
        }
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ dev —Ä–µ–∂–∏–º–µ
      if (process.env.NODE_ENV === 'development') {
        console.log('üîÑ [camelizeResponse] Converted response keys to camelCase');
      }
      
      return originalJson.call(this, camelizedData);
    }
    
    return originalJson.call(this, data);
  };
  
  next();
};

export default camelizeResponse;
