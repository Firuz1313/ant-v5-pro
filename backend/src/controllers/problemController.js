import Problem from "../models/Problem.js";
import Device from "../models/Device.js";
import {
  problemValidation,
  validateRequest,
} from "../middleware/validateRequest.js";

const problemModel = new Problem();
const deviceModel = new Device();

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–∞–º–∏
 */
class ProblemController {
  constructor() {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ IP
    this.lastCreationsByIP = new Map();
    this.SPAM_PROTECTION_WINDOW = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏ —Å –æ–¥–Ω–æ–≥–æ IP
  }
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
   * GET /api/v1/problems
   */
  async getProblems(req, res, next) {
    try {
      const {
        search,
        device_id,
        category,
        status,
        is_active,
        page = 1,
        limit = 20,
        sort = "priority",
        order = "desc",
        include_details = false,
        admin = false,
      } = req.query;

      const filters = {};
      if (search) filters.search = search;
      if (device_id) filters.device_id = device_id;
      if (category) filters.category = category;
      if (status) filters.status = status;

      // Set is_active filter only if explicitly requested
      if (is_active !== undefined) {
        filters.is_active = is_active === "true";
      }

      const options = {
        limit: Math.min(parseInt(limit), 100),
        offset: (parseInt(page) - 1) * Math.min(parseInt(limit), 100),
        sortBy: sort,
        sortOrder: order.toUpperCase(),
      };

      let problems;
      if (include_details === "true" || admin === "true") {
        problems = await problemModel.findAllWithDetails(filters, options);
      } else {
        problems = await problemModel.findAll(filters, options);
      }

      // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const total = await problemModel.count(filters);
      const totalPages = Math.ceil(total / options.limit);

      res.json({
        success: true,
        data: problems,
        pagination: {
          page: parseInt(page),
          limit: options.limit,
          total,
          totalPages,
          hasNext: parseInt(page) < totalPages,
          hasPrev: parseInt(page) > 1,
        },
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ ID
   * GET /api/v1/problems/:id
   */
  async getProblemById(req, res, next) {
    try {
      const { id } = req.params;
      const { include_details = false } = req.query;

      let problem;
      if (include_details === "true") {
        problem = await problemModel.findByIdWithDetails(id);
      } else {
        problem = await problemModel.findById(id);
      }

      if (!problem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      res.json({
        success: true,
        data: problem,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã
   * POST /api/v1/problems
   */
  async createProblem(req, res, next) {
    try {
      const problemData = req.body;
      const clientIP =
        req.ip ||
        req.connection.remoteAddress ||
        req.headers["x-forwarded-for"];

      // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
      const now = Date.now();
      const lastCreation = this.lastCreationsByIP.get(clientIP);

      if (lastCreation && now - lastCreation < this.SPAM_PROTECTION_WINDOW) {
        console.warn(
          `‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∞–º–∞ –æ—Ç IP: ${clientIP}. –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: ${new Date(lastCreation).toISOString()}`,
        );
        return res.status(429).json({
          success: false,
          error:
            "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
          errorType: "RATE_LIMIT",
          retryAfter: Math.ceil(
            (this.SPAM_PROTECTION_WINDOW - (now - lastCreation)) / 1000,
          ),
          timestamp: new Date().toISOString(),
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      if (problemData.device_id) {
        const device = await deviceModel.findById(problemData.device_id);
        if (!device || !device.is_active) {
          return res.status(400).json({
            success: false,
            error: "–£–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ",
            errorType: "VALIDATION_ERROR",
            timestamp: new Date().toISOString(),
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤ÔøΩÔøΩ—ã—Ö –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º)
      if (problemData.device_id && problemData.title) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const normalizedTitle = problemData.title.trim().toLowerCase();

        console.log(
          `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: "${problemData.title}" (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: "${normalizedTitle}") –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${problemData.device_id}`,
        );

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è case-insensitive –ø–æ–∏—Å–∫–∞
        const checkSql = `
          SELECT id, title, status, created_at
          FROM problems
          WHERE LOWER(TRIM(title)) = $1
            AND device_id = $2
            AND is_active = true
            AND status IN ('published', 'draft')
          LIMIT 1
        `;

        const checkResult = await problemModel.query(checkSql, [
          normalizedTitle,
          problemData.device_id,
        ]);
        const existingProblem = checkResult.rows[0];

        if (existingProblem) {
          console.warn(
            `‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–±–ª–µ–º—ã: "${problemData.title}" –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${problemData.device_id}`,
          );
          console.warn(
            `‚ö†Ô∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–æÔøΩÔøΩ–ª–µ–º–∞ ID: ${existingProblem.id}, —Å—Ç–∞—Ç—É—Å: ${existingProblem.status}`,
          );

          return res.status(409).json({
            success: false,
            error:
              "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
            errorType: "DUPLICATE_ERROR",
            details: {
              message:
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–ºÔøΩÔøΩ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
              suggestions: [
                "–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
                "–î–æ–±–∞–≤—å—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –¥–µ—Ç–∞–ª–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–æ–±–ª–µ–º—É",
              ],
            },
            existingProblem: {
              id: existingProblem.id,
              title: existingProblem.title,
              status: existingProblem.status,
              created_at: existingProblem.created_at,
            },
            timestamp: new Date().toISOString(),
          });
        }
      }

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      let attempts = 0;
      let newProblem = null;
      const maxAttempts = 5;

      while (attempts < maxAttempts && !newProblem) {
        try {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
          const uniqueProblemData = {
            ...problemData,
            id: undefined, // –ü–æ–∑–≤–æ–ª—è–µ–º BaseModel —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π ID
          };

          newProblem = await problemModel.create(uniqueProblemData);

          console.log(
            `‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${newProblem.id} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1})`,
          );

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
          this.lastCreationsByIP.set(clientIP, Date.now());

          // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
          if (this.lastCreationsByIP.size > 100) {
            const entries = Array.from(this.lastCreationsByIP.entries());
            const sortedEntries = entries
              .sort((a, b) => b[1] - a[1])
              .slice(0, 50);
            this.lastCreationsByIP.clear();
            sortedEntries.forEach(([ip, time]) =>
              this.lastCreationsByIP.set(ip, time),
            );
          }

          break;
        } catch (error) {
          attempts++;
          if (error.code === "23505" && error.detail?.includes("id")) {
            // –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ ID, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
            console.warn(
              `‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç ID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}`,
            );
            if (attempts >= maxAttempts) {
              throw new Error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫",
              );
            }
          } else {
            // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            throw error;
          }
        }
      }

      res.status(201).json({
        success: true,
        data: newProblem,
        message: "–ü—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   * PUT /api/v1/problems/:id
   */
  async updateProblem(req, res, next) {
    try {
      const { id } = req.params;
      const updateData = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ÉÔøΩÔøΩ–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      const existingProblem = await problemModel.findById(id);
      if (!existingProblem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      if (
        updateData.device_id &&
        updateData.device_id !== existingProblem.device_id
      ) {
        const device = await deviceModel.findById(updateData.device_id);
        if (!device || !device.is_active) {
          return res.status(400).json({
            success: false,
            error: "–£–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ",
            errorType: "VALIDATION_ERROR",
            timestamp: new Date().toISOString(),
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏ÔøΩÔøΩ
      if (
        updateData.title &&
        updateData.title.trim().toLowerCase() !==
          existingProblem.title.trim().toLowerCase()
      ) {
        const deviceIdToCheck =
          updateData.device_id || existingProblem.device_id;
        const normalizedTitle = updateData.title.trim().toLowerCase();

        console.log(
          `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: "${updateData.title}" –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${deviceIdToCheck}`,
        );

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è case-insensitive –ø–æ–∏—Å–∫–∞
        const checkSql = `
          SELECT id, title, status, created_at
          FROM problems
          WHERE LOWER(TRIM(title)) = $1
            AND device_id = $2
            AND is_active = true
            AND id != $3
          LIMIT 1
        `;

        const checkResult = await problemModel.query(checkSql, [
          normalizedTitle,
          deviceIdToCheck,
          id,
        ]);
        const duplicateProblem = checkResult.rows[0];

        if (duplicateProblem) {
          return res.status(409).json({
            success: false,
            error:
              "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—ÇÔøΩÔøΩ–∞",
            errorType: "DUPLICATE_ERROR",
            timestamp: new Date().toISOString(),
          });
        }
      }

      const updatedProblem = await problemModel.updateById(id, updateData);

      res.json({
        success: true,
        data: updatedProblem,
        message: "–ü—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   * DELETE /api/v1/problems/:id
   */
  async deleteProblem(req, res, next) {
    try {
      const { id } = req.params;
      const { force = false } = req.query;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      const existingProblem = await problemModel.findById(id);
      if (!existingProblem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      // ÔøΩÔøΩ—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
      const deleteCheck = await problemModel.canDelete(id);
      if (!deleteCheck.canDelete && force !== "true") {
        return res.status(409).json({
          success: false,
          error: deleteCheck.reason,
          errorType: "CONSTRAINT_ERROR",
          suggestion: deleteCheck.suggestion,
          canForceDelete: false,
          timestamp: new Date().toISOString(),
        });
      }

      let deletedProblem;
      if (force === "false") {
        // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ)
        deletedProblem = await problemModel.softDelete(id);
      } else {
        // –ñ–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        deletedProblem = await problemModel.delete(id);
      }

      res.json({
        success: true,
        data: deletedProblem,
        message:
          force === "false"
            ? "–ü—Ä–æ–±–ª–µ–º–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
            : "–ü—Ä–æ–±–ª–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
   * POST /api/v1/problems/:id/restore
   */
  async restoreProblem(req, res, next) {
    try {
      const { id } = req.params;

      const restoredProblem = await problemModel.restore(id);
      if (!restoredProblem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      res.json({
        success: true,
        data: restoredProblem,
        message: "–ü—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * ÔøΩÔøΩ–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
   * GET /api/v1/problems/search
   */
  async searchProblems(req, res, next) {
    try {
      const { q: searchTerm, limit = 20, offset = 0 } = req.query;

      if (!searchTerm || searchTerm.trim().length < 2) {
        return res.status(400).json({
          success: false,
          error: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞",
          errorType: "VALIDATION_ERROR",
          timestamp: new Date().toISOString(),
        });
      }

      const problems = await problemModel.search(searchTerm.trim(), {
        limit: Math.min(parseInt(limit), 50),
        offset: parseInt(offset),
      });

      res.json({
        success: true,
        data: problems,
        query: searchTerm.trim(),
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
   * GET /api/v1/problems/popular
   */
  async getPopularProblems(req, res, next) {
    try {
      const { limit = 10 } = req.query;

      const problems = await problemModel.getPopular(
        Math.min(parseInt(limit), 20),
      );

      res.json({
        success: true,
        data: problems,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
   * GET /api/v1/problems/device/:deviceId
   */
  async getProblemsByDevice(req, res, next) {
    try {
      const { deviceId } = req.params;
      const { status, limit = 20, offset = 0 } = req.query;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const device = await deviceModel.findById(deviceId);
      if (!device) {
        return res.status(404).json({
          success: false,
          error: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      const options = {
        status,
        limit: Math.min(parseInt(limit), 50),
        offset: parseInt(offset),
      };

      const problems = await problemModel.findByDevice(deviceId, options);

      res.json({
        success: true,
        data: problems,
        device: {
          id: device.id,
          name: device.name,
          brand: device.brand,
          model: device.model,
        },
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * GET /api/v1/problems/category/:category
   */
  async getProblemsByCategory(req, res, next) {
    try {
      const { category } = req.params;
      const { device_id, limit = 20, offset = 0 } = req.query;

      const options = {
        device_id,
        limit: Math.min(parseInt(limit), 50),
        offset: parseInt(offset),
      };

      const problems = await problemModel.findByCategory(category, options);

      res.json({
        success: true,
        data: problems,
        category,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   * POST /api/v1/problems/:id/duplicate
   */
  async duplicateProblem(req, res, next) {
    try {
      const { id } = req.params;
      const { target_device_id } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      const existingProblem = await problemModel.findById(id);
      if (!existingProblem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (target_device_id) {
        const targetDevice = await deviceModel.findById(target_device_id);
        if (!targetDevice || !targetDevice.is_active) {
          return res.status(400).json({
            success: false,
            error: "–¶–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ",
            errorType: "VALIDATION_ERROR",
            timestamp: new Date().toISOString(),
          });
        }
      }

      const duplicatedProblem = await problemModel.duplicate(
        id,
        target_device_id,
      );

      res.status(201).json({
        success: true,
        data: duplicatedProblem,
        message: "–ü—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã
   * POST /api/v1/problems/:id/publish
   */
  async publishProblem(req, res, next) {
    try {
      const { id } = req.params;

      const publishedProblem = await problemModel.publish(id);
      if (!publishedProblem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      res.json({
        success: true,
        data: publishedProblem,
        message: "–ü—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –°–Ω—è—Ç–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   * POST /api/v1/problems/:id/unpublish
   */
  async unpublishProblem(req, res, next) {
    try {
      const { id } = req.params;

      const unpublishedProblem = await problemModel.unpublish(id);
      if (!unpublishedProblem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      res.json({
        success: true,
        data: unpublishedProblem,
        message: "–ü—Ä–æ–±–ª–µ–º–∞ —Å–Ω—è—Ç–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
   * GET /api/v1/problems/stats
   */
  async getProblemStats(req, res, next) {
    try {
      const stats = await problemModel.getStats();

      res.json({
        success: true,
        data: stats,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
   * POST /api/v1/problems/:id/update-stats
   */
  async updateProblemStats(req, res, next) {
    try {
      const { id } = req.params;
      const { session_result } = req.body;

      if (!session_result || !["success", "failure"].includes(session_result)) {
        return res.status(400).json({
          success: false,
          error: "–†–µ–∑—É–ª—åÔøΩÔøΩ–∞—Ç —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success –∏–ª–∏ failure",
          errorType: "VALIDATION_ERROR",
          timestamp: new Date().toISOString(),
        });
      }

      const updatedProblem = await problemModel.updateStats(id, session_result);
      if (!updatedProblem) {
        return res.status(404).json({
          success: false,
          error: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          errorType: "NOT_FOUND",
          timestamp: new Date().toISOString(),
        });
      }

      res.json({
        success: true,
        data: updatedProblem,
        message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º
   * GET /api/v1/problems/export
   */
  async exportProblems(req, res, next) {
    try {
      const { format = "json", device_id, include_steps = false } = req.query;

      const filters = { is_active: true };
      if (device_id) filters.device_id = device_id;

      const problems = await problemModel.findAllWithDetails(filters);

      let exportData = problems;

      if (include_steps === "true") {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è —à–∞–≥–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        // –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∏–º–ø–æ—Ä—Ç DiagnosticStep –º–æ–¥–µ–ª–∏
      }

      if (format === "json") {
        res.json({
          success: true,
          data: exportData,
          meta: {
            exportedAt: new Date().toISOString(),
            totalRecords: exportData.length,
            format: "json",
            filters: filters,
          },
        });
      } else {
        // –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ (CSV, XML –∏ —Ç.–¥.)
        res.status(400).json({
          success: false,
          error: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
          supportedFormats: ["json"],
          timestamp: new Date().toISOString(),
        });
      }
    } catch (error) {
      next(error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
const problemController = new ProblemController();

// –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫ –º–µ—Ç–æ–¥–∞–º
const validateProblemCreation = validateRequest(problemValidation.create);
const validateProblemUpdate = validateRequest(problemValidation.update);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
export const getProblems =
  problemController.getProblems.bind(problemController);
export const getProblemById =
  problemController.getProblemById.bind(problemController);
export const createProblem = [
  validateProblemCreation,
  problemController.createProblem.bind(problemController),
];
export const updateProblem = [
  validateProblemUpdate,
  problemController.updateProblem.bind(problemController),
];
export const deleteProblem =
  problemController.deleteProblem.bind(problemController);
export const restoreProblem =
  problemController.restoreProblem.bind(problemController);
export const searchProblems =
  problemController.searchProblems.bind(problemController);
export const getPopularProblems =
  problemController.getPopularProblems.bind(problemController);
export const getProblemsByDevice =
  problemController.getProblemsByDevice.bind(problemController);
export const getProblemsByCategory =
  problemController.getProblemsByCategory.bind(problemController);
export const duplicateProblem =
  problemController.duplicateProblem.bind(problemController);
export const publishProblem =
  problemController.publishProblem.bind(problemController);
export const unpublishProblem =
  problemController.unpublishProblem.bind(problemController);
export const getProblemStats =
  problemController.getProblemStats.bind(problemController);
export const updateProblemStats =
  problemController.updateProblemStats.bind(problemController);
export const exportProblems =
  problemController.exportProblems.bind(problemController);

export default problemController;
