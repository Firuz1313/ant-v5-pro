import TVInterface from '../models/TVInterface.js';
import { v4 as uuidv4 } from 'uuid';

const tvInterfaceModel = new TVInterface();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export const getAllTVInterfaces = async (req, res) => {
  try {
    const filters = {
      device_id: req.query.device_id,
      type: req.query.type,
      is_active: req.query.is_active !== undefined ? req.query.is_active === 'true' : undefined,
      search: req.query.search,
      limit: req.query.limit,
      offset: req.query.offset
    };

    // –£–±–∏—Ä–∞–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
    Object.keys(filters).forEach(key => 
      filters[key] === undefined && delete filters[key]
    );

    const tvInterfaces = await tvInterfaceModel.getAll(filters);

    res.json({
      success: true,
      data: tvInterfaces,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in getAllTVInterfaces:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ ID
export const getTVInterfaceById = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    const tvInterface = await tvInterfaceModel.getById(id);

    if (!tvInterface) {
      return res.status(404).json({
        success: false,
        error: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    res.json({
      success: true,
      data: tvInterface,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in getTVInterfaceById:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ device_id
export const getTVInterfacesByDeviceId = async (req, res) => {
  try {
    const { deviceId } = req.params;

    if (!deviceId) {
      return res.status(400).json({
        success: false,
        error: 'ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    const tvInterfaces = await tvInterfaceModel.getByDeviceId(deviceId);

    res.json({
      success: true,
      data: tvInterfaces,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in getTVInterfacesByDeviceId:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏ÔøΩÔøΩ–π —Ç–∞–π–º–∞—É—Ç–æ–≤)
export const createTVInterface = async (req, res) => {
  const startTime = Date.now();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  req.setTimeout(300000); // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  res.setTimeout(300000); // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞

  try {
    const { name, description, type, device_id, screenshot_url, screenshot_data, clickable_areas, highlight_areas } = req.body;

    console.log('üîÑ Starting TV interface creation:', {
      name: name?.substring(0, 50),
      type,
      device_id,
      hasScreenshot: !!screenshot_data,
      screenshotSize: screenshot_data ? Math.round(screenshot_data.length / 1024) + 'KB' : 'None'
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä screenshot_data –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
    if (screenshot_data) {
      const screenshotSize = screenshot_data.length;
      const sizeInMB = (screenshotSize / 1024 / 1024).toFixed(2);
      console.log(`üì∑ Screenshot data size: ${sizeInMB}MB`);

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
      if (screenshotSize > 50 * 1024 * 1024) { // 50MB
        console.warn(`‚ö†Ô∏è Large screenshot data detected (${sizeInMB}MB) - this may take longer to process`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10MB)
      if (screenshotSize > 10 * 1024 * 1024) { // 10MB
        return res.status(413).json({
          success: false,
          error: '–†–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 10–ú–ë',
          details: `–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${sizeInMB}–ú–ë. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10–ú–ë`,
          timestamp: new Date().toISOString()
        });
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !name.trim()) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
        timestamp: new Date().toISOString()
      });
    }

    if (!type) {
      return res.status(400).json({
        success: false,
        error: '–¢–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    if (!device_id) {
      return res.status(400).json({
        success: false,
        error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞',
        timestamp: new Date().toISOString()
      });
    }

    const tvInterfaceData = {
      id: uuidv4(),
      name: name.trim(),
      description: description?.trim() || '',
      type,
      device_id,
      screenshot_url: screenshot_url || null,
      screenshot_data: screenshot_data || null,
      clickable_areas: clickable_areas || [],
      highlight_areas: highlight_areas || []
    };

    console.log('üîç Calling optimized model create for TV interface');

    // –°–æ–∑–¥–∞–µ–º Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbOperationTimeout = new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Database operation timeout - –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏'));
      }, 240000); // 4 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ë–î

      tvInterfaceModel.create(tvInterfaceData)
        .then(result => {
          clearTimeout(timeout);
          resolve(result);
        })
        .catch(error => {
          clearTimeout(timeout);
          reject(error);
        });
    });

    const tvInterface = await dbOperationTimeout;

    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚úÖ TV interface creation completed in ${duration}ms`);

    res.status(201).json({
      success: true,
      data: tvInterface,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      processingTime: `${duration}ms`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.error(`‚ùå TV interface creation failed after ${duration}ms:`, error);
    console.error('Error details:', {
      name: error.name,
      message: error.message,
      stack: error.stack?.split('\n').slice(0, 5).join('\n') // –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Å—Ç–µ–∫–∞
    });

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    if (error.message.includes('timeout') || error.message.includes('–ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏')) {
      return res.status(408).json({
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏',
        details: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.',
        suggestions: [
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ',
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è'
        ],
        processingTime: `${duration}ms`,
        timestamp: new Date().toISOString()
      });
    }

    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ') || error.message.includes('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')) {
      return res.status(400).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (error.message.includes('connection') || error.message.includes('ECONNRESET')) {
      return res.status(503).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: new Date().toISOString()
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (error.message.includes('out of memory') || error.message.includes('ENOMEM')) {
      return res.status(413).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
        details: '–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
        timestamp: new Date().toISOString()
      });
    }

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      details: error.message,
      processingTime: `${duration}ms`,
      timestamp: new Date().toISOString()
    });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤)
export const updateTVInterface = async (req, res) => {
  const startTime = Date.now();
  const { id } = req.params;
  const updateData = req.body;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  req.setTimeout(300000); // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  res.setTimeout(300000); // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞

  try {
    console.log(`üîÑ Starting TV interface update: ${id}`);
    console.log(`üìä Update data size: ${JSON.stringify(updateData).length} characters`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä screenshot_data –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
    if (updateData.screenshot_data) {
      const screenshotSize = updateData.screenshot_data.length;
      const sizeInMB = (screenshotSize / 1024 / 1024).toFixed(2);
      console.log(`üì∑ Screenshot data size: ${sizeInMB}MB`);

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
      if (screenshotSize > 50 * 1024 * 1024) { // 50MB
        console.warn(`‚ö†Ô∏è Large screenshot data detected (${sizeInMB}MB) - this may take longer to process`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10MB)
      if (screenshotSize > 10 * 1024 * 1024) { // 10MB
        return res.status(413).json({
          success: false,
          error: '–†–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 10–ú–ë',
          details: `–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${sizeInMB}–ú–ë. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10–ú–ë`,
          timestamp: new Date().toISOString()
        });
      }
    }

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    console.log(`üîç Calling optimized model update for TV interface: ${id}`);

    // –°–æ–∑–¥–∞–µ–º Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbOperationTimeout = new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Database operation timeout - –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏'));
      }, 240000); // 4 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ë–î

      tvInterfaceModel.update(id, updateData)
        .then(result => {
          clearTimeout(timeout);
          resolve(result);
        })
        .catch(error => {
          clearTimeout(timeout);
          reject(error);
        });
    });

    const tvInterface = await dbOperationTimeout;

    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚úÖ TV interface update completed in ${duration}ms`);

    res.json({
      success: true,
      data: tvInterface,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      timestamp: new Date().toISOString(),
      processingTime: `${duration}ms`
    });
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.error(`‚ùå TV interface update failed after ${duration}ms:`, error);
    console.error('Error details:', {
      name: error.name,
      message: error.message,
      stack: error.stack?.split('\n').slice(0, 5).join('\n') // –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Å—Ç–µ–∫–∞
    });

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    if (error.message.includes('timeout') || error.message.includes('–ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏')) {
      return res.status(408).json({
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏',
        details: '–û–±–Ω–æÔøΩÔøΩ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.',
        suggestions: [
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ',
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è'
        ],
        processingTime: `${duration}ms`,
        timestamp: new Date().toISOString()
      });
    }

    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      return res.status(404).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }

    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ') || error.message.includes('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')) {
      return res.status(400).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (error.message.includes('connection') || error.message.includes('ECONNRESET')) {
      return res.status(503).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: new Date().toISOString()
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (error.message.includes('out of memory') || error.message.includes('ENOMEM')) {
      return res.status(413).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
        details: '–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
        timestamp: new Date().toISOString()
      });
    }

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      details: error.message,
      processingTime: `${duration}ms`,
      timestamp: new Date().toISOString()
    });
  }
};

// –£–¥–∞–ª–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
export const deleteTVInterface = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const existing = await tvInterfaceModel.getById(id);
    if (!existing) {
      return res.status(404).json({
        success: false,
        error: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    await tvInterfaceModel.delete(id);

    res.json({
      success: true,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in deleteTVInterface:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
export const toggleTVInterfaceStatus = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    const tvInterface = await tvInterfaceModel.toggleStatus(id);

    res.json({
      success: true,
      data: tvInterface,
      message: `TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ${tvInterface.is_active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞ÔøΩÔøΩ' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in toggleTVInterfaceStatus:', error);
    
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      return res.status(404).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
export const duplicateTVInterface = async (req, res) => {
  try {
    const { id } = req.params;
    const { name } = req.body;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    const tvInterface = await tvInterfaceModel.duplicate(id, name);

    res.status(201).json({
      success: true,
      data: tvInterface,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –¥—É–±ÔøΩÔøΩ–∏—Ä–æ–≤–∞–Ω',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in duplicateTVInterface:', error);
    
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      return res.status(404).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
export const getTVInterfaceStats = async (req, res) => {
  try {
    const stats = await tvInterfaceModel.getStats();

    res.json({
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in getTVInterfaceStats:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// –≠–∫—Å–ø–æ—ÄÔøΩÔøΩ–∏—Ä–æ–≤–∞—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ JSON
export const exportTVInterface = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    const tvInterface = await tvInterfaceModel.getById(id);

    if (!tvInterface) {
      return res.status(404).json({
        success: false,
        error: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        timestamp: new Date().toISOString()
      });
    }

    // –ü–æ–¥ÔøΩÔøΩ–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportData = {
      name: tvInterface.name,
      description: tvInterface.description,
      type: tvInterface.type,
      device_info: {
        name: tvInterface.device_name,
        brand: tvInterface.device_brand,
        model: tvInterface.device_model
      },
      screenshot_data: tvInterface.screenshot_data,
      clickable_areas: tvInterface.clickable_areas,
      highlight_areas: tvInterface.highlight_areas,
      exported_at: new Date().toISOString(),
      version: '1.0'
    };

    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', `attachment; filename="tv-interface-${tvInterface.name.replace(/[^a-zA-Z0-9]/g, '-')}.json"`);
    
    res.json({
      success: true,
      data: exportData,
      message: 'TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in exportTVInterface:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

export default {
  getAllTVInterfaces,
  getTVInterfaceById,
  getTVInterfacesByDeviceId,
  createTVInterface,
  updateTVInterface,
  deleteTVInterface,
  toggleTVInterfaceStatus,
  duplicateTVInterface,
  getTVInterfaceStats,
  exportTVInterface
};
