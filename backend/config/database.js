/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
 */

import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export const databaseConfig = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  connection: {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ë–î)
    connectionString: process.env.DATABASE_URL,

    // Fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    host: process.env.DB_HOST || "localhost",
    port: parseInt(process.env.DB_PORT) || 5432,
    database: process.env.DB_NAME || "ant_support",
    user: process.env.DB_USER || "postgres",
    password: process.env.DB_PASSWORD || "password",

    // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ssl: process.env.DATABASE_URL?.includes("neon.tech")
      ? { rejectUnauthorized: false }
      : process.env.DB_SSL === "true"
        ? { rejectUnauthorized: false }
        : false,
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  pool: {
    min: parseInt(process.env.DB_POOL_MIN) || 2,
    max: parseInt(process.env.DB_POOL_MAX) || 20,
    idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT) || 30000,
    connectionTimeoutMillis:
      parseInt(process.env.DB_CONNECTION_TIMEOUT) || 10000,
    maxUses: 7500, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  development: {
    autoInitialize: process.env.NODE_ENV === "development",
    runMigrations: true,
    seedData: true,
    logQueries: process.env.DEBUG === "true",
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  production: {
    autoInitialize: false,
    runMigrations: false,
    seedData: false,
    logQueries: false,
  },
};

// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function getDatabaseConfig() {
  const baseConfig = {
    ...databaseConfig.connection,
    ...databaseConfig.pool,
  };

  const envConfig =
    process.env.NODE_ENV === "production"
      ? databaseConfig.production
      : databaseConfig.development;

  return {
    ...baseConfig,
    ...envConfig,
  };
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export function validateDatabaseConfig() {
  const config = getDatabaseConfig();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!config.connectionString && (!config.host || !config.database)) {
    throw new Error(
      "–ù–µ –∑–∞–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DATABASE_URL –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã host/database",
    );
  }

  if (
    config.connectionString &&
    !config.connectionString.startsWith("postgresql://")
  ) {
    throw new Error("DATABASE_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å postgresql://");
  }

  return true;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
export function logDatabaseConfig() {
  const config = getDatabaseConfig();

  console.log("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:");

  if (config.connectionString) {
    // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const maskedUrl = config.connectionString.replace(/:([^:@]+)@/, ":***@");
    console.log(`   –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${maskedUrl}`);
  } else {
    console.log(`   –•–æ—Å—Ç: ${config.host}:${config.port}`);
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${config.database}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${config.user}`);
  }

  console.log(`   SSL: ${config.ssl ? "–≤–∫–ª—é—á–µ–Ω" : "–æ—Ç–∫–ª—é—á–µ–Ω"}`);
  console.log(`   –ú–∏–Ω. —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${config.min}`);
  console.log(`   –ú–∞–∫—Å. —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${config.max}`);
  console.log(`   –¢–∞–π–º–∞—É—Ç –ø—Ä–æ—Å—Ç–æ—è: ${config.idleTimeoutMillis}ms`);
  console.log(`   –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${config.autoInitialize ? "–¥–∞" : "–Ω–µ—Ç"}`);
}

export default databaseConfig;
