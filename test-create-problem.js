// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async function testCreateProblem() {
  const baseUrl = process.env.NODE_ENV === 'production' 
    ? 'https://acda120aedd441349b3374c520906a2d-73ca7d7b38f348b8a1b98f465.fly.dev'
    : 'http://localhost:8081';
  
  const testData = {
    device_id: 'openbox',
    title: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ ' + Date.now(),
    description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã',
    category: 'critical',
    icon: 'AlertTriangle',
    color: 'from-red-500 to-red-600',
    priority: 1,
    estimated_time: 5,
    difficulty: 'beginner',
    success_rate: 100,
    status: 'published'
  };

  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞:', baseUrl + '/api/v1/problems');
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', testData);
    
    const response = await fetch(baseUrl + '/api/v1/problems', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üì° Headers:', Object.fromEntries(response.headers.entries()));

    const responseText = await response.text();
    console.log('üìÉ –û—Ç–≤–µ—Ç (text):', responseText);

    if (response.ok) {
      try {
        const result = JSON.parse(responseText);
        console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
        return result;
      } catch (e) {
        console.log('‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON');
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, responseText);
    }
  } catch (error) {
    console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –≤ Node.js
if (typeof module !== 'undefined' && module.exports) {
  testCreateProblem();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  window.testCreateProblem = testCreateProblem;
}
