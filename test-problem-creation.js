#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è BaseModel
 */

const API_BASE = "http://localhost:5000/api/v1";

async function makeRequest(url, method = "GET", data = null) {
  const options = {
    method,
    headers: {
      "Content-Type": "application/json",
    },
  };

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(url, options);
    const result = await response.json();
    return { status: response.status, data: result };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    return { status: 0, error: error.message };
  }
}

async function testProblemCreation() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n");

  // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  console.log("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");
  const devicesResponse = await makeRequest(`${API_BASE}/devices`);

  if (devicesResponse.status !== 200) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", devicesResponse);
    return;
  }

  const devices = devicesResponse.data.data;
  if (!devices || devices.length === 0) {
    console.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }

  const testDevice = devices[0];
  console.log(
    `‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${testDevice.name} (ID: ${testDevice.id})\n`,
  );

  // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
  const uniqueTitle = `–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ ${Date.now()}`;
  const testProblem = {
    title: uniqueTitle,
    description: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
    device_id: testDevice.id,
    category: "minor",
    priority: 1,
    status: "draft",
  };

  console.log("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã...");
  console.log("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:", JSON.stringify(testProblem, null, 2));

  const createResponse = await makeRequest(
    `${API_BASE}/problems`,
    "POST",
    testProblem,
  );

  if (createResponse.status === 201) {
    console.log("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", createResponse.data.data.id);
    const createdProblem = createResponse.data.data;

    // 3. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
    console.log("\n3Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞...");
    const duplicateResponse = await makeRequest(
      `${API_BASE}/problems`,
      "POST",
      testProblem,
    );

    if (duplicateResponse.status === 409) {
      console.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
      console.log(
        "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:",
        JSON.stringify(duplicateResponse.data, null, 2),
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
      if (
        duplicateResponse.data.errorType === "DUPLICATE_ERROR" &&
        duplicateResponse.data.existingProblem &&
        duplicateResponse.data.details?.suggestions
      ) {
        console.log("‚úÖ –°ÔøΩÔøΩ—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
      } else {
        console.log("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –Ω–µ–ø–æ–ª–Ω–∞—è");
      }
    } else {
      console.log("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç:", duplicateResponse);
    }

    // 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    console.log("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º...");
    const differentProblem = {
      ...testProblem,
      title: `${uniqueTitle} - –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è`,
    };

    const differentResponse = await makeRequest(
      `${API_BASE}/problems`,
      "POST",
      differentProblem,
    );

    if (differentResponse.status === 201) {
      console.log("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ª–∏—á–∞—é—â–∏–º—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

      // –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      console.log("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
      await makeRequest(
        `${API_BASE}/problems/${createdProblem.id}?force=true`,
        "DELETE",
      );
      await makeRequest(
        `${API_BASE}/problems/${differentResponse.data.data.id}?force=true`,
        "DELETE",
      );
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã");
    } else {
      console.log(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –æ—Ç–ª–∏—á–∞—é—â–∏–º—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º:",
        differentResponse,
      );
    }
  } else {
    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É:", createResponse);
  }

  console.log("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function checkApiStatus() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API...");
  const statusResponse = await makeRequest(`${API_BASE}/status`);

  if (statusResponse.status === 200) {
    console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω\n");
    return true;
  } else {
    console.log("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", statusResponse);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const isApiReady = await checkApiStatus();
  if (isApiReady) {
    await testProblemCreation();
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å fetch
if (typeof fetch === "undefined") {
  console.log("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º node-fetch...");
  try {
    const { default: fetch } = await import("node-fetch");
    global.fetch = fetch;
    await main();
  } catch (error) {
    console.error(
      "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—ÇÔøΩÔøΩ—Ä–æ–≤–∞—Ç—å node-fetch. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: npm install node-fetch",
    );
  }
} else {
  await main();
}
